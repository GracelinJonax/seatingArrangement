{"ast":null,"code":"import axios from 'axios';\nconst API_BASE_URL = 'http://localhost:8090/';\nconst api = axios.create({\n  baseURL: API_BASE_URL\n});\nexport const createLayout = async (name, layout) => {\n  console.log(name, layout);\n  try {\n    const response = await api.get(`layout/`);\n    // const layout = response.data;\n    // return layout;\n  } catch (error) {\n    throw new Error(error || 'Failed to create layout');\n  }\n};\nexport const getAlllayout = async name => {\n  try {\n    const response = await api.get(`layout/${name}`);\n    const layoutData = response.data;\n    return layoutData;\n  } catch (error) {\n    throw new Error(error || 'Failed to get all layout');\n  }\n};\nexport const postlayoutApi = async result => {\n  try {\n    const response = await api.post(\"layout\", result);\n    const layoutData = response.data;\n    return layoutData;\n  } catch (error) {\n    throw new Error(error || 'Failed to post layout');\n  }\n};\nexport const allocationApi = async data => {\n  try {\n    const response = await api.post(\"allocation\", data);\n    const layoutData = response;\n    return layoutData;\n  } catch (error) {\n    throw new Error(error || 'Failed to get allocation');\n  }\n};\nexport const csvFileApi = async file => {\n  console.log(file);\n  try {\n    const response = await api.post(\"csvFile\", file, {\n      headers: {\n        'Content-Type': 'multipart/form-data'\n      }\n    });\n    const layoutData = response;\n    return layoutData;\n  } catch (error) {\n    throw new Error(error || 'Failed to post csv file');\n  }\n};","map":{"version":3,"names":["axios","API_BASE_URL","api","create","baseURL","createLayout","name","layout","console","log","response","get","error","Error","getAlllayout","layoutData","data","postlayoutApi","result","post","allocationApi","csvFileApi","file","headers"],"sources":["/home/divum/Desktop/seating frontend modifyed/seating-frontend/src/actions/ApiCall.js"],"sourcesContent":["import axios from 'axios';\n\nconst API_BASE_URL = 'http://localhost:8090/';\n\nconst api = axios.create({\n    baseURL: API_BASE_URL,\n});\n\nexport const createLayout = async (name,layout) => {\n    console.log(name,layout)\n    try {\n        const response = await api.get(`layout/`,);\n        // const layout = response.data;\n        // return layout;\n    } catch (error) {\n        throw new Error(error || 'Failed to create layout');\n    }\n};\nexport const getAlllayout = async (name) => {\n    try {\n        const response = await api.get(`layout/${name}`);\n        const layoutData = response.data;\n        return layoutData;\n    } catch (error) {\n        throw new Error(error || 'Failed to get all layout');\n    }\n};\n\nexport const postlayoutApi = async (result) => {\n    try {\n        const response = await api.post(\"layout\", result);\n        const layoutData = response.data;\n        return layoutData;\n    } catch (error) {\n        throw new Error(error || 'Failed to post layout');\n    }\n};\n\nexport const allocationApi = async (data) => {\n    try {\n        const response = await api.post(\"allocation\", data);\n        const layoutData = response;\n        return layoutData;\n    } catch (error) {\n        throw new Error(error || 'Failed to get allocation');\n    }\n};\n\nexport const csvFileApi = async (file) => {\n    console.log(file)\n    try {\n        const response = await api.post(\"csvFile\", file,\n            {\n                headers: {\n                    'Content-Type': 'multipart/form-data',\n                },\n            });\n        const layoutData = response;\n        return layoutData;\n    } catch (error) {\n        throw new Error(error || 'Failed to post csv file');\n    }\n};"],"mappings":"AAAA,OAAOA,KAAK,MAAM,OAAO;AAEzB,MAAMC,YAAY,GAAG,wBAAwB;AAE7C,MAAMC,GAAG,GAAGF,KAAK,CAACG,MAAM,CAAC;EACrBC,OAAO,EAAEH;AACb,CAAC,CAAC;AAEF,OAAO,MAAMI,YAAY,GAAG,MAAAA,CAAOC,IAAI,EAACC,MAAM,KAAK;EAC/CC,OAAO,CAACC,GAAG,CAACH,IAAI,EAACC,MAAM,CAAC;EACxB,IAAI;IACA,MAAMG,QAAQ,GAAG,MAAMR,GAAG,CAACS,GAAG,CAAE,SAAS,CAAC;IAC1C;IACA;EACJ,CAAC,CAAC,OAAOC,KAAK,EAAE;IACZ,MAAM,IAAIC,KAAK,CAACD,KAAK,IAAI,yBAAyB,CAAC;EACvD;AACJ,CAAC;AACD,OAAO,MAAME,YAAY,GAAG,MAAOR,IAAI,IAAK;EACxC,IAAI;IACA,MAAMI,QAAQ,GAAG,MAAMR,GAAG,CAACS,GAAG,CAAE,UAASL,IAAK,EAAC,CAAC;IAChD,MAAMS,UAAU,GAAGL,QAAQ,CAACM,IAAI;IAChC,OAAOD,UAAU;EACrB,CAAC,CAAC,OAAOH,KAAK,EAAE;IACZ,MAAM,IAAIC,KAAK,CAACD,KAAK,IAAI,0BAA0B,CAAC;EACxD;AACJ,CAAC;AAED,OAAO,MAAMK,aAAa,GAAG,MAAOC,MAAM,IAAK;EAC3C,IAAI;IACA,MAAMR,QAAQ,GAAG,MAAMR,GAAG,CAACiB,IAAI,CAAC,QAAQ,EAAED,MAAM,CAAC;IACjD,MAAMH,UAAU,GAAGL,QAAQ,CAACM,IAAI;IAChC,OAAOD,UAAU;EACrB,CAAC,CAAC,OAAOH,KAAK,EAAE;IACZ,MAAM,IAAIC,KAAK,CAACD,KAAK,IAAI,uBAAuB,CAAC;EACrD;AACJ,CAAC;AAED,OAAO,MAAMQ,aAAa,GAAG,MAAOJ,IAAI,IAAK;EACzC,IAAI;IACA,MAAMN,QAAQ,GAAG,MAAMR,GAAG,CAACiB,IAAI,CAAC,YAAY,EAAEH,IAAI,CAAC;IACnD,MAAMD,UAAU,GAAGL,QAAQ;IAC3B,OAAOK,UAAU;EACrB,CAAC,CAAC,OAAOH,KAAK,EAAE;IACZ,MAAM,IAAIC,KAAK,CAACD,KAAK,IAAI,0BAA0B,CAAC;EACxD;AACJ,CAAC;AAED,OAAO,MAAMS,UAAU,GAAG,MAAOC,IAAI,IAAK;EACtCd,OAAO,CAACC,GAAG,CAACa,IAAI,CAAC;EACjB,IAAI;IACA,MAAMZ,QAAQ,GAAG,MAAMR,GAAG,CAACiB,IAAI,CAAC,SAAS,EAAEG,IAAI,EAC3C;MACIC,OAAO,EAAE;QACL,cAAc,EAAE;MACpB;IACJ,CAAC,CAAC;IACN,MAAMR,UAAU,GAAGL,QAAQ;IAC3B,OAAOK,UAAU;EACrB,CAAC,CAAC,OAAOH,KAAK,EAAE;IACZ,MAAM,IAAIC,KAAK,CAACD,KAAK,IAAI,yBAAyB,CAAC;EACvD;AACJ,CAAC"},"metadata":{},"sourceType":"module","externalDependencies":[]}