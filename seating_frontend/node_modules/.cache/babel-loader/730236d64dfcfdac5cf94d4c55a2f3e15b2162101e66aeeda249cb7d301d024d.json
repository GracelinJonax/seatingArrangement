{"ast":null,"code":"// import { useContext, useEffect, useState } from \"react\";\n// import axios from \"axios\";\n// import \"./Seating.css\";\n// import { CompanyName } from \"../../context/CreateContext\";\n// import { Link, json, useLocation } from \"react-router-dom\";\n// import { colorList } from \"../../constants/colorList\";\n\n// const Seating = () => {\n//   const [isOutputGenerated, setIsOutput] = useState(false);\n//   const { companyName } = useContext(CompanyName);\n//   const formData = new FormData();\n//   const location = useLocation();\n//   const res = location.state.data;\n//   const flag = location.state.flag;\n//   let availableSpaces = location.state.availableSpaces;\n//   const [outputArray, setOutputArray] = useState();\n//   const [layOut, setLayOut] = useState(null);\n//   const [file, setFile] = useState(null);\n//   const [teamList, setTeamList] = useState([]);\n//   const [teamNameList, setTeamNameList] = useState([]);\n//   const [teamKeyList, setTeamKeyList] = useState([]);\n//   const [preference, setPreference] = useState(2);\n//   const [orderedTeamList, setOrderedTeamList] = useState([]);\n//   const [space, setSpace] = useState(availableSpaces);\n\n//   useEffect(() => {\n//     loadLayOut();\n//   }, []);\n//   // console.log(teamList);\n//   const [teamDetails, setteamDetails] = useState({});\n//   let mymap = new Map([\n//     [\"A\", 1],\n//     [\"B\", 2],\n//   ]);\n//   const [result, setResult] = useState(null);\n//   mymap.forEach((value) => {\n//     // console.log(\"val > \", value);\n//   });\n//   const loadLayOut = async () => {\n//     setLayOut(res);\n//   };\n\n//   const handleFile = (e) => {\n//     setFile(e.target.files[0]);\n//   };\n//   console.log(file)\n//   formData.append('file', file);\n//   console.log(formData)\n\n//   const handleSubmit = async () => {\n//     let arr = [];\n//     teamList.map((team) => {\n//       arr.push(team.TeamName);\n//     });\n//     setTeamNameList(arr);\n//     // console.log(arr);\n//     const res = await axios.post(\"http://localhost:8090/allocation\", {\n//       companyName: companyName,\n//       teamDtoList: teamList,\n//       preference: preference,\n//     });\n//     // console.log(\"result\", res);\n//     // console.log(availableSpaces,\"availableSpaces\");\n//     setIsOutput(true);\n//     setResult(res);\n//     setOutputArray(res.data.data.allocation);\n//     // console.log(outputArray);\n//     // arr.map((teamName) => {\n//     //   teamKeyList.push(res.data.data.teamIds[teamName]);\n//     // });\n//     let teamKeyList = [];\n//     res.data.data.teamReferenceList.map((team) => {\n//       teamKeyList.push(team.key);\n//     });\n//     // console.log(\"key list\", teamKeyList);\n//     setTeamKeyList(teamKeyList);\n//     setOrderedTeamList(res.data.data.teamReferenceList);\n//   };\n//   const handleCloseBtn = (index) => {\n//     let arr = [...teamList];\n//     setSpace(space + arr[index].TeamCount);\n//     arr = arr.slice(0, index).concat(arr.slice(index + 1, arr.length));\n//     setTeamList(arr);\n//     // console.log(arr[])\n//   };\n\n//   const handleFileSubmit = async () => {\n//     try {\n//       const res = await axios.post(\"http://localhost:8090/csvFile\", formData,\n//         {\n//           headers: {\n//             'Content-Type': 'multipart/form-data',\n//           },\n//         }\n//       )\n//       console.log(res)\n//     } catch (error) {\n//       console.log(error)\n//     }\n\n//   }\n\n//   const handleAddTeam = () => {\n//     let arr = [...teamList];\n//     arr.push({\n//       TeamName: \"\",\n//       TeamCount: \"\",\n//     });\n//     setTeamList(arr);\n//     // console.log(\">>\", arr);\n//   };\n//   console.log(teamList);\n//   teamList.map((e) => {\n//     console.log(e.TeamName !== \"\");\n//     console.log(e.TeamCount !== \"\" && e.TeamCount > 0);\n//   });\n//   const handleOnChange = (e, index) => {\n//     let arr = [...teamList];\n//     let spaces = space;\n//     if (teamList[index].TeamCount === \"\" && e.target.name === \"TeamCount\") {\n//       spaces -= Number(e.target.value);\n//       setSpace(spaces);\n//     }\n\n//     arr[index] = {\n//       ...arr[index],\n\n//       [e.target.name]:\n//         e.target.name === \"TeamName\" ? e.target.value : Number(e.target.value),\n//     };\n\n//     if (teamList[index].TeamCount !== \"\" && e.target.name === \"TeamCount\") {\n//       spaces += teamList[index].TeamCount;\n//       spaces -= Number(e.target.value);\n//       setSpace(spaces);\n//     }\n//     setTeamList(arr);\n//   };\n//   // console.log(maxSpaceValue)\n//   // console.log(\"A2\".includes(\"A\"), teamKeyList);\n//   const handleReturnColor = (teamKeyValue) => {\n//     for (let i = 0; i < teamKeyList.length; i++) {\n//       if (teamKeyValue && teamKeyValue.includes(teamKeyList[i])) {\n//         return colorList[i];\n//       }\n//     }\n//     return \"grey\";\n//   };\n//   const handlePrefOnClick = (prefNum) => {\n//     setPreference(prefNum);\n//   }\n\n//   return (\n//     <div className=\"seating\">\n//       <div className=\"container-1\">\n//         <table className=\"MyTable\">\n//           <tbody>\n//             {flag ? (\n//               <>\n//                 {res.layOut.map((row, i) => {\n//                   return (\n//                     <tr key={i}>\n//                       {row.map((value, j) => {\n//                         return (\n//                           <td\n//                             key={j}\n//                             className=\"grid-box\"\n//                             style={{\n//                               backgroundColor:\n//                                 value === 1 ? \"#2ecc71\" : \"#f1f2f6\",\n//                             }}\n//                           >\n//                             {value}\n//                           </td>\n//                         );\n//                       })}\n//                     </tr>\n//                   );\n//                 })}\n//               </>\n//             ) : (\n//               <>\n//                 {res.map((row, i) => {\n//                   return (\n//                     <tr key={i}>\n//                       {row.map((value, j) => {\n//                         return (\n//                           <td\n//                             key={j}\n//                             className=\"grid-box\"\n//                             style={{\n//                               backgroundColor:\n//                                 value === 1 ? \"#2ecc71\" : \"#f1f2f6\",\n//                             }}\n//                           >\n//                             {value}\n//                           </td>\n//                         );\n//                       })}\n//                     </tr>\n//                   );\n//                 })}\n//               </>\n//             )}\n//           </tbody>\n//         </table>\n//         <div className=\"form-wrapper\">\n//           <h3>availableSpaces:{space}</h3>\n\n//           <h2>Add Team</h2>\n\n//           <div className=\"btn-wrapper\">\n//             <button className=\"add-btn\" onClick={handleAddTeam}>\n//               + Add\n//             </button>\n//             <label className=\"radio-title\">Count Priority :</label>\n//             <label className=\"radio-btn\">\n//               <input\n//                 type=\"radio\"\n//                 name=\"option\"\n//                 checked={preference === 2}\n//                 onClick={() => handlePrefOnClick(2)}\n//               />\n//               ASC\n//             </label>\n//             <label className=\"radio-btn\">\n//               <input\n//                 type=\"radio\"\n//                 name=\"option\"\n//                 checked={preference === 1}\n//                 onClick={() => handlePrefOnClick(1)}\n//               />\n//               DES\n//             </label>\n//             <label className=\"radio-btn\">\n//               <input\n//                 type=\"radio\"\n//                 name=\"option\"\n//                 checked={preference === 3}\n//                 onClick={() => handlePrefOnClick(3)}\n//               />\n//               Random\n//             </label>\n//           </div>\n//           <div className=\"team-list-input-wrapper\">\n//             <div className=\"team-list-container\">\n//               {teamList &&\n//                 teamList?.map((data, index) => {\n//                   return (\n//                     <div className=\"input-wrapper\">\n//                       <input\n//                         type=\"text\"\n//                         name=\"TeamName\"\n//                         value={data.TeamName}\n//                         className=\"input-box\"\n//                         onChange={(e) => handleOnChange(e, index)}\n//                         placeholder={\"Enter Team \" + (index + 1) + \" Name\"}\n//                       />\n//                       <input\n//                         type=\"number\"\n//                         name=\"TeamCount\"\n//                         value={data.TeamCount}\n//                         min=\"0\"\n//                         // max={something}\n//                         max={availableSpaces}\n//                         disabled={space <= 0}\n//                         className=\"input-box\"\n//                         placeholder={\"Enter Team \" + (index + 1) + \" Count\"}\n//                         onChange={(e) => handleOnChange(e, index)}\n//                       />\n\n//                       <button\n//                         className=\"cross-btn\"\n//                         onClick={() => handleCloseBtn(index)}\n//                       >\n//                         X\n//                       </button>\n//                     </div>\n//                   );\n//                 })}\n//               <div className=\"input-file\">\n//                 OR\n//                 <input\n//                   onChange={handleFile}\n//                   className=\"input-box1\"\n//                   type=\"file\"\n//                 />\n//                 <button onClick={handleFileSubmit} className=\"click-btn\">Verify</button>\n//               </div>\n//             </div>\n//           </div>\n//           <button className=\"submit-btn\" onClick={handleSubmit}>\n//             Submit\n//           </button>\n//         </div>\n//       </div>\n//       {/* <h3>{space}</h3> */}\n//       <div className=\"container-1\">\n//         <div className=\"layout-wrapper\">\n//           {isOutputGenerated && (\n//             <>\n//               <h2>Team Allocation Layout</h2>\n//               <table className=\"MyTable\">\n//                 <tbody>\n//                   {/* {console.log(\"res >>\", res)} */}\n//                   {outputArray.map((row, i) => {\n//                     return (\n//                       <tr key={i}>\n//                         {row.map((value, j) => {\n//                           return (\n//                             <td\n//                               key={j}\n//                               className=\"grid-box\"\n//                               style={{\n//                                 backgroundColor: flag\n//                                   ? res.layOut[i][j] === 1\n//                                     ? handleReturnColor(value)\n//                                     : \"#f1f2f6\"\n//                                   : res?.[i][j] === 1\n//                                     ? handleReturnColor(value)\n//                                     : \"#f1f2f6\",\n//                               }}\n//                             >\n//                               {value}\n//                             </td>\n//                           );\n//                         })}\n//                       </tr>\n//                     );\n//                   })}\n//                 </tbody>\n//               </table>\n//             </>\n//           )}\n//         </div>\n//         {isOutputGenerated && (\n//           <div className=\"team-key-continer\">\n//             {teamNameList && <h2>Team Keys</h2>}\n//             <table className=\"team-key-list key-table\">\n//               <thead>\n//                 <th>Team Name</th>\n//                 <th>Team Key</th>\n//               </thead>\n//               <tbody>\n//                 {orderedTeamList &&\n//                   orderedTeamList.map((team) => {\n//                     return (\n//                       <tr>\n//                         <td>{team.name}</td>\n//                         <td>{team.key}</td>\n\n//                       </tr>\n//                     );\n//                   })}\n//               </tbody>\n//             </table>\n//           </div>\n//         )}\n//       </div>\n//     </div>\n//   );\n// };\n\n// export default Seating;","map":{"version":3,"names":[],"sources":["/home/divum/Desktop/seating frontend/seating_arrangement_frontend/src/pages/Seating/Seating.jsx"],"sourcesContent":["// import { useContext, useEffect, useState } from \"react\";\n// import axios from \"axios\";\n// import \"./Seating.css\";\n// import { CompanyName } from \"../../context/CreateContext\";\n// import { Link, json, useLocation } from \"react-router-dom\";\n// import { colorList } from \"../../constants/colorList\";\n\n// const Seating = () => {\n//   const [isOutputGenerated, setIsOutput] = useState(false);\n//   const { companyName } = useContext(CompanyName);\n//   const formData = new FormData();\n//   const location = useLocation();\n//   const res = location.state.data;\n//   const flag = location.state.flag;\n//   let availableSpaces = location.state.availableSpaces;\n//   const [outputArray, setOutputArray] = useState();\n//   const [layOut, setLayOut] = useState(null);\n//   const [file, setFile] = useState(null);\n//   const [teamList, setTeamList] = useState([]);\n//   const [teamNameList, setTeamNameList] = useState([]);\n//   const [teamKeyList, setTeamKeyList] = useState([]);\n//   const [preference, setPreference] = useState(2);\n//   const [orderedTeamList, setOrderedTeamList] = useState([]);\n//   const [space, setSpace] = useState(availableSpaces);\n\n//   useEffect(() => {\n//     loadLayOut();\n//   }, []);\n//   // console.log(teamList);\n//   const [teamDetails, setteamDetails] = useState({});\n//   let mymap = new Map([\n//     [\"A\", 1],\n//     [\"B\", 2],\n//   ]);\n//   const [result, setResult] = useState(null);\n//   mymap.forEach((value) => {\n//     // console.log(\"val > \", value);\n//   });\n//   const loadLayOut = async () => {\n//     setLayOut(res);\n//   };\n\n//   const handleFile = (e) => {\n//     setFile(e.target.files[0]);\n//   };\n//   console.log(file)\n//   formData.append('file', file);\n//   console.log(formData)\n\n//   const handleSubmit = async () => {\n//     let arr = [];\n//     teamList.map((team) => {\n//       arr.push(team.TeamName);\n//     });\n//     setTeamNameList(arr);\n//     // console.log(arr);\n//     const res = await axios.post(\"http://localhost:8090/allocation\", {\n//       companyName: companyName,\n//       teamDtoList: teamList,\n//       preference: preference,\n//     });\n//     // console.log(\"result\", res);\n//     // console.log(availableSpaces,\"availableSpaces\");\n//     setIsOutput(true);\n//     setResult(res);\n//     setOutputArray(res.data.data.allocation);\n//     // console.log(outputArray);\n//     // arr.map((teamName) => {\n//     //   teamKeyList.push(res.data.data.teamIds[teamName]);\n//     // });\n//     let teamKeyList = [];\n//     res.data.data.teamReferenceList.map((team) => {\n//       teamKeyList.push(team.key);\n//     });\n//     // console.log(\"key list\", teamKeyList);\n//     setTeamKeyList(teamKeyList);\n//     setOrderedTeamList(res.data.data.teamReferenceList);\n//   };\n//   const handleCloseBtn = (index) => {\n//     let arr = [...teamList];\n//     setSpace(space + arr[index].TeamCount);\n//     arr = arr.slice(0, index).concat(arr.slice(index + 1, arr.length));\n//     setTeamList(arr);\n//     // console.log(arr[])\n//   };\n\n\n\n//   const handleFileSubmit = async () => {\n//     try {\n//       const res = await axios.post(\"http://localhost:8090/csvFile\", formData,\n//         {\n//           headers: {\n//             'Content-Type': 'multipart/form-data',\n//           },\n//         }\n//       )\n//       console.log(res)\n//     } catch (error) {\n//       console.log(error)\n//     }\n\n//   }\n\n//   const handleAddTeam = () => {\n//     let arr = [...teamList];\n//     arr.push({\n//       TeamName: \"\",\n//       TeamCount: \"\",\n//     });\n//     setTeamList(arr);\n//     // console.log(\">>\", arr);\n//   };\n//   console.log(teamList);\n//   teamList.map((e) => {\n//     console.log(e.TeamName !== \"\");\n//     console.log(e.TeamCount !== \"\" && e.TeamCount > 0);\n//   });\n//   const handleOnChange = (e, index) => {\n//     let arr = [...teamList];\n//     let spaces = space;\n//     if (teamList[index].TeamCount === \"\" && e.target.name === \"TeamCount\") {\n//       spaces -= Number(e.target.value);\n//       setSpace(spaces);\n//     }\n\n//     arr[index] = {\n//       ...arr[index],\n\n//       [e.target.name]:\n//         e.target.name === \"TeamName\" ? e.target.value : Number(e.target.value),\n//     };\n\n//     if (teamList[index].TeamCount !== \"\" && e.target.name === \"TeamCount\") {\n//       spaces += teamList[index].TeamCount;\n//       spaces -= Number(e.target.value);\n//       setSpace(spaces);\n//     }\n//     setTeamList(arr);\n//   };\n//   // console.log(maxSpaceValue)\n//   // console.log(\"A2\".includes(\"A\"), teamKeyList);\n//   const handleReturnColor = (teamKeyValue) => {\n//     for (let i = 0; i < teamKeyList.length; i++) {\n//       if (teamKeyValue && teamKeyValue.includes(teamKeyList[i])) {\n//         return colorList[i];\n//       }\n//     }\n//     return \"grey\";\n//   };\n//   const handlePrefOnClick = (prefNum) => {\n//     setPreference(prefNum);\n//   }\n\n\n\n\n//   return (\n//     <div className=\"seating\">\n//       <div className=\"container-1\">\n//         <table className=\"MyTable\">\n//           <tbody>\n//             {flag ? (\n//               <>\n//                 {res.layOut.map((row, i) => {\n//                   return (\n//                     <tr key={i}>\n//                       {row.map((value, j) => {\n//                         return (\n//                           <td\n//                             key={j}\n//                             className=\"grid-box\"\n//                             style={{\n//                               backgroundColor:\n//                                 value === 1 ? \"#2ecc71\" : \"#f1f2f6\",\n//                             }}\n//                           >\n//                             {value}\n//                           </td>\n//                         );\n//                       })}\n//                     </tr>\n//                   );\n//                 })}\n//               </>\n//             ) : (\n//               <>\n//                 {res.map((row, i) => {\n//                   return (\n//                     <tr key={i}>\n//                       {row.map((value, j) => {\n//                         return (\n//                           <td\n//                             key={j}\n//                             className=\"grid-box\"\n//                             style={{\n//                               backgroundColor:\n//                                 value === 1 ? \"#2ecc71\" : \"#f1f2f6\",\n//                             }}\n//                           >\n//                             {value}\n//                           </td>\n//                         );\n//                       })}\n//                     </tr>\n//                   );\n//                 })}\n//               </>\n//             )}\n//           </tbody>\n//         </table>\n//         <div className=\"form-wrapper\">\n//           <h3>availableSpaces:{space}</h3>\n\n//           <h2>Add Team</h2>\n\n//           <div className=\"btn-wrapper\">\n//             <button className=\"add-btn\" onClick={handleAddTeam}>\n//               + Add\n//             </button>\n//             <label className=\"radio-title\">Count Priority :</label>\n//             <label className=\"radio-btn\">\n//               <input\n//                 type=\"radio\"\n//                 name=\"option\"\n//                 checked={preference === 2}\n//                 onClick={() => handlePrefOnClick(2)}\n//               />\n//               ASC\n//             </label>\n//             <label className=\"radio-btn\">\n//               <input\n//                 type=\"radio\"\n//                 name=\"option\"\n//                 checked={preference === 1}\n//                 onClick={() => handlePrefOnClick(1)}\n//               />\n//               DES\n//             </label>\n//             <label className=\"radio-btn\">\n//               <input\n//                 type=\"radio\"\n//                 name=\"option\"\n//                 checked={preference === 3}\n//                 onClick={() => handlePrefOnClick(3)}\n//               />\n//               Random\n//             </label>\n//           </div>\n//           <div className=\"team-list-input-wrapper\">\n//             <div className=\"team-list-container\">\n//               {teamList &&\n//                 teamList?.map((data, index) => {\n//                   return (\n//                     <div className=\"input-wrapper\">\n//                       <input\n//                         type=\"text\"\n//                         name=\"TeamName\"\n//                         value={data.TeamName}\n//                         className=\"input-box\"\n//                         onChange={(e) => handleOnChange(e, index)}\n//                         placeholder={\"Enter Team \" + (index + 1) + \" Name\"}\n//                       />\n//                       <input\n//                         type=\"number\"\n//                         name=\"TeamCount\"\n//                         value={data.TeamCount}\n//                         min=\"0\"\n//                         // max={something}\n//                         max={availableSpaces}\n//                         disabled={space <= 0}\n//                         className=\"input-box\"\n//                         placeholder={\"Enter Team \" + (index + 1) + \" Count\"}\n//                         onChange={(e) => handleOnChange(e, index)}\n//                       />\n\n//                       <button\n//                         className=\"cross-btn\"\n//                         onClick={() => handleCloseBtn(index)}\n//                       >\n//                         X\n//                       </button>\n//                     </div>\n//                   );\n//                 })}\n//               <div className=\"input-file\">\n//                 OR\n//                 <input\n//                   onChange={handleFile}\n//                   className=\"input-box1\"\n//                   type=\"file\"\n//                 />\n//                 <button onClick={handleFileSubmit} className=\"click-btn\">Verify</button>\n//               </div>\n//             </div>\n//           </div>\n//           <button className=\"submit-btn\" onClick={handleSubmit}>\n//             Submit\n//           </button>\n//         </div>\n//       </div>\n//       {/* <h3>{space}</h3> */}\n//       <div className=\"container-1\">\n//         <div className=\"layout-wrapper\">\n//           {isOutputGenerated && (\n//             <>\n//               <h2>Team Allocation Layout</h2>\n//               <table className=\"MyTable\">\n//                 <tbody>\n//                   {/* {console.log(\"res >>\", res)} */}\n//                   {outputArray.map((row, i) => {\n//                     return (\n//                       <tr key={i}>\n//                         {row.map((value, j) => {\n//                           return (\n//                             <td\n//                               key={j}\n//                               className=\"grid-box\"\n//                               style={{\n//                                 backgroundColor: flag\n//                                   ? res.layOut[i][j] === 1\n//                                     ? handleReturnColor(value)\n//                                     : \"#f1f2f6\"\n//                                   : res?.[i][j] === 1\n//                                     ? handleReturnColor(value)\n//                                     : \"#f1f2f6\",\n//                               }}\n//                             >\n//                               {value}\n//                             </td>\n//                           );\n//                         })}\n//                       </tr>\n//                     );\n//                   })}\n//                 </tbody>\n//               </table>\n//             </>\n//           )}\n//         </div>\n//         {isOutputGenerated && (\n//           <div className=\"team-key-continer\">\n//             {teamNameList && <h2>Team Keys</h2>}\n//             <table className=\"team-key-list key-table\">\n//               <thead>\n//                 <th>Team Name</th>\n//                 <th>Team Key</th>\n//               </thead>\n//               <tbody>\n//                 {orderedTeamList &&\n//                   orderedTeamList.map((team) => {\n//                     return (\n//                       <tr>\n//                         <td>{team.name}</td>\n//                         <td>{team.key}</td>\n\n//                       </tr>\n//                     );\n//                   })}\n//               </tbody>\n//             </table>\n//           </div>\n//         )}\n//       </div>\n//     </div>\n//   );\n// };\n\n// export default Seating;\n\n"],"mappings":"AAAA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAIA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;;AAEA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAKA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA"},"metadata":{},"sourceType":"module","externalDependencies":[]}