{"ast":null,"code":"import axios from 'axios';\nconst API_BASE_URL = 'http://localhost:8090/';\nconst api = axios.create({\n  baseURL: API_BASE_URL\n});\nexport const createLayout = async (name, layout) => {\n  console.log(name, layout);\n  try {\n    const response = await api.post(`layout`, {\n      \"companyName\": name,\n      \"companyLayoutList\": layout\n    });\n    const layoutData = response.data;\n    return layoutData;\n  } catch (error) {\n    console.log('Failed to create layout', error);\n  }\n};\nexport const getAlllayout = async name => {\n  try {\n    const response = await api.get(`layout/${name}`);\n    const layoutData = response.data;\n    return layoutData;\n  } catch (error) {\n    console.log('Failed to get all layout', error);\n  }\n};\nexport const postlayoutApi = async result => {\n  try {\n    const response = await api.post(\"layout\", result);\n    const layoutData = response.data;\n    return layoutData;\n  } catch (error) {\n    console.log('Failed to post layout', error);\n  }\n};\nexport const allocationApi = async data => {\n  try {\n    const response = await api.post(\"allocation\", data);\n    console.log(response);\n    const layoutData = response.data;\n    return layoutData;\n  } catch (error) {\n    console.log('Failed to get allocation', error);\n  }\n};\nexport const csvFileApi = async (file, setInCorrectFile) => {\n  try {\n    const response = await api.post(\"csvFile\", file, {\n      headers: {\n        'Content-Type': 'multipart/form-data'\n      }\n    });\n    setInCorrectFile(false);\n    console.log(\"falseeeeeeeeeeeeeeee\");\n    const layoutData = response.data;\n    return layoutData;\n  } catch (error) {\n    setInCorrectFile(true);\n    console.log('Failed to get allocation', error);\n  }\n};","map":{"version":3,"names":["axios","API_BASE_URL","api","create","baseURL","createLayout","name","layout","console","log","response","post","layoutData","data","error","getAlllayout","get","postlayoutApi","result","allocationApi","csvFileApi","file","setInCorrectFile","headers"],"sources":["/home/divum/Desktop/seating frontend modifyed/seating-frontend/src/actions/ApiCall.js"],"sourcesContent":["import axios from 'axios';\n\nconst API_BASE_URL = 'http://localhost:8090/';\n\nconst api = axios.create({\n    baseURL: API_BASE_URL,\n});\n\nexport const createLayout = async (name,layout) => {\n    console.log(name,layout)\n    try {\n        const response = await api.post(`layout`,\n            {\n                \"companyName\":name,\n                \"companyLayoutList\":layout\n            }\n        );\n        const layoutData = response.data;\n        return layoutData;\n    } catch (error) {\n        console.log('Failed to create layout',error )\n    }\n};\nexport const getAlllayout = async (name) => {\n    try {\n        const response = await api.get(`layout/${name}`);\n        const layoutData = response.data;\n        return layoutData;\n    } catch (error) {\n        console.log('Failed to get all layout',error )\n    }\n};\n\nexport const postlayoutApi = async (result) => {\n    try {\n        const response = await api.post(\"layout\", result);\n        const layoutData = response.data;\n        return layoutData;\n    } catch (error) {\n        console.log('Failed to post layout',error )\n    }\n};\n\nexport const allocationApi = async (data) => {\n    try {\n        const response = await api.post(\"allocation\", data);\n        console.log(response)\n        const layoutData = response.data;\n        return layoutData;\n    } catch (error) {\n        console.log('Failed to get allocation',error )\n    }\n};\n\nexport const csvFileApi = async (file,setInCorrectFile) => {\n    try {\n        const response = await api.post(\"csvFile\", file,\n        {\n            headers: {\n                'Content-Type': 'multipart/form-data',\n            },\n        });\n        setInCorrectFile(false)\n        console.log(\"falseeeeeeeeeeeeeeee\")\n        const layoutData = response.data;\n        return layoutData;\n    } catch (error) {\n        setInCorrectFile(true)\n        console.log('Failed to get allocation',error )\n    }\n};"],"mappings":"AAAA,OAAOA,KAAK,MAAM,OAAO;AAEzB,MAAMC,YAAY,GAAG,wBAAwB;AAE7C,MAAMC,GAAG,GAAGF,KAAK,CAACG,MAAM,CAAC;EACrBC,OAAO,EAAEH;AACb,CAAC,CAAC;AAEF,OAAO,MAAMI,YAAY,GAAG,MAAAA,CAAOC,IAAI,EAACC,MAAM,KAAK;EAC/CC,OAAO,CAACC,GAAG,CAACH,IAAI,EAACC,MAAM,CAAC;EACxB,IAAI;IACA,MAAMG,QAAQ,GAAG,MAAMR,GAAG,CAACS,IAAI,CAAE,QAAO,EACpC;MACI,aAAa,EAACL,IAAI;MAClB,mBAAmB,EAACC;IACxB,CACJ,CAAC;IACD,MAAMK,UAAU,GAAGF,QAAQ,CAACG,IAAI;IAChC,OAAOD,UAAU;EACrB,CAAC,CAAC,OAAOE,KAAK,EAAE;IACZN,OAAO,CAACC,GAAG,CAAC,yBAAyB,EAACK,KAAM,CAAC;EACjD;AACJ,CAAC;AACD,OAAO,MAAMC,YAAY,GAAG,MAAOT,IAAI,IAAK;EACxC,IAAI;IACA,MAAMI,QAAQ,GAAG,MAAMR,GAAG,CAACc,GAAG,CAAE,UAASV,IAAK,EAAC,CAAC;IAChD,MAAMM,UAAU,GAAGF,QAAQ,CAACG,IAAI;IAChC,OAAOD,UAAU;EACrB,CAAC,CAAC,OAAOE,KAAK,EAAE;IACZN,OAAO,CAACC,GAAG,CAAC,0BAA0B,EAACK,KAAM,CAAC;EAClD;AACJ,CAAC;AAED,OAAO,MAAMG,aAAa,GAAG,MAAOC,MAAM,IAAK;EAC3C,IAAI;IACA,MAAMR,QAAQ,GAAG,MAAMR,GAAG,CAACS,IAAI,CAAC,QAAQ,EAAEO,MAAM,CAAC;IACjD,MAAMN,UAAU,GAAGF,QAAQ,CAACG,IAAI;IAChC,OAAOD,UAAU;EACrB,CAAC,CAAC,OAAOE,KAAK,EAAE;IACZN,OAAO,CAACC,GAAG,CAAC,uBAAuB,EAACK,KAAM,CAAC;EAC/C;AACJ,CAAC;AAED,OAAO,MAAMK,aAAa,GAAG,MAAON,IAAI,IAAK;EACzC,IAAI;IACA,MAAMH,QAAQ,GAAG,MAAMR,GAAG,CAACS,IAAI,CAAC,YAAY,EAAEE,IAAI,CAAC;IACnDL,OAAO,CAACC,GAAG,CAACC,QAAQ,CAAC;IACrB,MAAME,UAAU,GAAGF,QAAQ,CAACG,IAAI;IAChC,OAAOD,UAAU;EACrB,CAAC,CAAC,OAAOE,KAAK,EAAE;IACZN,OAAO,CAACC,GAAG,CAAC,0BAA0B,EAACK,KAAM,CAAC;EAClD;AACJ,CAAC;AAED,OAAO,MAAMM,UAAU,GAAG,MAAAA,CAAOC,IAAI,EAACC,gBAAgB,KAAK;EACvD,IAAI;IACA,MAAMZ,QAAQ,GAAG,MAAMR,GAAG,CAACS,IAAI,CAAC,SAAS,EAAEU,IAAI,EAC/C;MACIE,OAAO,EAAE;QACL,cAAc,EAAE;MACpB;IACJ,CAAC,CAAC;IACFD,gBAAgB,CAAC,KAAK,CAAC;IACvBd,OAAO,CAACC,GAAG,CAAC,sBAAsB,CAAC;IACnC,MAAMG,UAAU,GAAGF,QAAQ,CAACG,IAAI;IAChC,OAAOD,UAAU;EACrB,CAAC,CAAC,OAAOE,KAAK,EAAE;IACZQ,gBAAgB,CAAC,IAAI,CAAC;IACtBd,OAAO,CAACC,GAAG,CAAC,0BAA0B,EAACK,KAAM,CAAC;EAClD;AACJ,CAAC"},"metadata":{},"sourceType":"module","externalDependencies":[]}